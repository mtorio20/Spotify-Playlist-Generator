import json
import requests
import secret
import sys
from pprint import pprint

class lastFmSpotify:
    def __init__(self):
        self.token = secret.spotify_token()
        self.api_key = secret.last_fm_api_key()
        self.user_id = secret.spotify_user_id()
        self.spotify_headers = {"Content-Type": "application/json", 
                                "Authorization": f"Bearer {self.token}"}
        self.playlist_id = ''
        self.song_info = {}
        self.uris = []
        self.artist = ''


#Returns top songs for an inputted artist from lastfm. Takes artist/song and adds them to song_info dictionary
    def get_songs_from_lastfm(self):
        artist = input("Enter an artists' name: ")
        self.artist = artist
        params = {'limit': 10, 'api_key': self.api_key}
        url = f'http://ws.audioscrobbler.com/2.0/?method=artist.gettoptracks&artist={artist}&api_key=YOUR_API_KEY&format=json'
        response = requests.get(url, params=params)
        if response.status_code != 200:
            print("Error!")
        res = response.json()
        for item in res['toptracks']['track']:
            song = item['name'].title()
            artist = item['artist']['name'].title()
            self.song_info[song] = artist
        print(f"Getting all song URIs for {self.artist.title()}\n")
        self.get_uri_from_spotify()
        print("Creating a playlist on Spotify\n")
        self.create_spotify_playlist()
        print("Adding songs!\n")
        self.add_songs_to_playlist()
        print("These songs were added to the playlist: \n")
        self.list_songs_in_playlist()


#Getting a URI for each song generated by fetch_songs_from_lastfm() function and appending them to a list of uris 
    def get_uri_from_spotify(self):
        for song_name, artist in self.song_info.items():
            url = f"https://api.spotify.com/v1/search?query=track%3A{song_name}+artist%3A{artist}&type=track&offset=0&1limit=10"
            response = requests.get(url, headers = self.spotify_headers)
            res = response.json()
            output_uri = res['tracks']['items']
            uri = output_uri[0]['uri']
            self.uris.append(uri)


#Using spotify generated key and credentials to create an EMPTY playlist in spotify
    def create_spotify_playlist(self):
        data = {"name": f"Top 10 songs from {self.artist.title()} ",
                "description": "Songs generated via LastFM's API",
                "public": False
                }
        data = json.dumps(data)
        url = f"https://api.spotify.com/v1/users/{self.user_id}/playlists"
        response = requests.post(url, data=data, headers=self.spotify_headers)
        if response.status_code == 201:
            res = response.json()
            self.playlist_id = res['id']
            print("Successfully created spotify playlist!")
        else:
            print(response.content)


#Utilizes uris generated from get_uri_from_playlist() to create a playlist that is posted to empty playlist created from create_spotify_platlist
    def add_songs_to_playlist(self):
        uri_list = json.dumps(self.uris)
        url = f"https://api.spotify.com/v1/playlists/{self.playlist_id}/tracks"
        response = requests.post(url, data=uri_list, headers = self.spotify_headers)
        if response.status_code == 201:
            print("Songs added!")


#Lists all songs added to the spotify playlist
    def list_songs_in_playlist(self):
        url = f"https://api.spotify.com/v1/playlists/{self.playlist_id}/tracks"
        response = requests.get(url, headers=self.spotify_headers)
        if response.status_code != 200:
            self.exceptionalExceptions(response.status_code, response.text())
        else:
            res = response.json()
            for item in res['items']:
                print(item['track']['name'])
    

#Handles exceptions in case API requests fail (if response status codes are not 200/201)
    def exceptionalExceptions(self, status_code, err):
        print("Exception occured with status_code", status_code)
        print("Error: ", err)
        sys.exit(0)


if __name__ == '__main__':
    d = lastFmSpotify()
    d.get_songs_from_lastfm()